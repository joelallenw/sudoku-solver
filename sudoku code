import tkinter as tk

class SudokuSolver:
    def __init__(self):
        # Create the main window
        self.root = tk.Tk()

        # Create the puzzle grid
        self.puzzle_grid = [[tk.StringVar() for j in range(9)] for i in range(9)]

        # Create the GUI
        self.create_gui()

    def create_gui(self):
        # Create a 9x9 grid of text entry boxes for the puzzle
        for i in range(9):
            for j in range(9):
                entry = tk.Entry(self.root, width=2, textvariable=self.puzzle_grid[i][j])
                entry.grid(row=i, column=j)

        # Create a solve button
        solve_button = tk.Button(self.root, text="Solve", command=self.solve)
        solve_button.grid(row=9, column=0, columnspan=9, sticky="WE")

    def update_gui(self, solved):
        # Update the GUI with the solution
        for i in range(9):
            for j in range(9):
                self.puzzle_grid[i][j].set(solved[i][j])

    def get_puzzle(self):
        # Get the current puzzle as a 2D list of integers
        puzzle = [[0 for j in range(9)] for i in range(9)]
        for i in range(9):
            for j in range(9):
                cell = self.puzzle_grid[i][j].get()
                if cell == "":
                    puzzle[i][j] = 0
                else:
                    puzzle[i][j] = int(cell)

        # Return the puzzle
        return puzzle

    def solve(self):
        # Get the current puzzle as a 2D list of integers
        puzzle = self.get_puzzle()

        # Solve the puzzle
        solved = self.solve_puzzle(puzzle)

        # Update the GUI with the solution
        self.update_gui(solved)

    def solve_puzzle(self, puzzle):
        # Define the solve_sudoku function
        def solve_sudoku(grid):
            # Find the next empty cell
            for i in range(9):
                for j in range(9):
                    if grid[i][j] == 0:
                        # Try all possible values for the empty cell
                        for value in range(1, 10):
                            if is_valid(grid, i, j, value):
                                grid[i][j] = value

                                # Recursively try to solve the puzzle with the updated grid
                                if solve_sudoku(grid):
                                    return True

                        # If the puzzle cannot be solved, reset the cell and try again
                        grid[i][j] = 0

            # If no value works for the empty cell, return False
            # to trigger backtracking
            return False

        # If the puzzle is solved, return True
        return True

        # Call the solve_sudoku function and return its return value
        return solve_sudoku(puzzle)

def is_valid(grid, row, col, value):

  # Check if the value is already used in the row
  if value in grid[row]:
    return False

  # Check if the value is already used in the column
  for i in range(9):
    if grid[i][col] == value:
      return False

  # Check if the value is already used in the 3x3 box
  box_row = row // 3
  box_col = col // 3
  for i in range(3):
    for j in range(3):
      if grid[box_row * 3 + i][box_col * 3 + j] == value:
        return False

  # If the value is not used in any of the above cases, it is valid
  else:
    return True



# Create and run the Sudoku solver
app = SudokuSolver()
app.root.mainloop()